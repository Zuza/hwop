= Tournament stablo =

Moćna struktura, može sve što može i [[strukture/logaritamska]], a i puno više. Konstrukcija tournament stabla je dosta jednostavna za razliku od logaritamske.

== Konstrukcija stabla ==

Članovi niza $X$ nalaze se kao listovi u potpunom binarnom stablu. Stoga ako je $N$ veličina niza $X$ , $N$ prvo povećamo na prvu potenciju broja 2 veću ili jednaku od $N$ .

Korijen tog stabla označavamo brojem 1, a djeca svakog čvora t, označena su brojevima $2 \cdot t$ i $2 \cdot t+1$ .

Dakle, iz svega toga slijedi da su elementi niza $X$ označeni su brojevima $N$ do $2 \cdot N - 1$ unutar stabla.

graph {
  node [style=filled];
  1 -- 2; 1 -- 3;
  2 -- 4; 2 -- 5;
  3 -- 6; 3 -- 7;
  node [fontsize=10];
  4 -- "8 : X[1]"; 4 -- "9 : X[2]";
  5 -- "10 : X[3]"; 5 -- "11 : X[4]";
  6 -- "12 : X[5]"; 6 -- "13 : X[6]";
  7 -- "14 : X[7]";
  node [fontsize=14];
  7 -- 15
}

U primjeru na slici niz $X$ velik je 7, i njegovi članovi zapisani su u čvorovima s oznakama od 8 do 15.

== Autoritet čvora ==

I sad… ako stablo koristimo za traženje sume, onda svaki čvor u stablu pamti sumu elemenata niza unutar njegovog podstabla. Ako stablo koristimo za traženje minimuma  ili maksimuma, onda svaki čvor u stablu pamti minimum odnosno maksimum elemenata niza unutar njegova podstabla.

== Implementacija ==

```
int manji(int a, int b) {return a < b ? a : b;}
int veci(int a, int b) {return a > b ? a : b;}

const int inf = 1000000000;

class tournament {
private:
   struct data {
      int sum;
      int minimum;
      int maximum;
      data() { sum = 0; minimum = inf; maximum = -inf; }
   };
   int offset;
   vector<data> a;
   
   int from, to;
   int sum( int i, int lo, int hi ) {
      if( from >= hi || to <= lo ) return 0;
      if( lo >= from && hi <= to ) return a[i].sum;
      return sum( 2*i, lo, (lo+hi)/2 ) + sum( 2*i+1, (lo+hi)/2, hi );
   }
   int min( int i, int lo, int hi ) {
      if( from >= hi || to <= lo ) return inf;
      if( lo >= from && hi <= to ) return a[i].minimum;
      return manji( min( 2*i, lo, (lo+hi)/2 ), min( 2*i+1, (lo+hi)/2, hi ) );
   }
   int max( int i, int lo, int hi ) {
      if( from >= hi || to <= lo ) return -inf;
      if( lo >= from && hi <= to ) return a[i].maximum;
      return veci( max( 2*i, lo, (lo+hi)/2 ), max( 2*i+1, (lo+hi)/2, hi ) );
   }
   
public:
   tournament( int N ) {
      for( offset = 1; offset < N; offset *= 2 );
      a.resize( 2*offset );
   }
   int operator () ( int i ) { return a[offset+i].sum; } // daje X[i]
   
   void set( int i, const int value ) { // postavlja X[i] na value
      i += offset;
      a[i].sum = a[i].minimum = a[i].maximum = value;
      for( i /= 2; i > 0; i /= 2 ) {
         a[i].sum = a[2*i].sum + a[2*i+1].sum;
         a[i].minimum = manji( a[2*i].minimum, a[2*i+1].minimum );
         a[i].maximum = veci ( a[2*i].maximum, a[2*i+1].maximum );
      }
   }
   // trazi sumu elemenata [lo, hi>
   int sum( int lo, int hi ) { from = lo; to = hi; return sum( 1, 0, offset ); }
   int min( int lo, int hi ) { from = lo; to = hi; return min( 1, 0, offset ); }
   int max( int lo, int hi ) { from = lo; to = hi; return max( 1, 0, offset ); }
};
```

== Rasprava ==

Na prvi pogled može izgledati jako komplicirano, ali nije. Ova implementacija pamti i sumu i minimum i maksimum.

Usredotočimo se na funkciju `set` koja postavlja $X_i$ na neku vrijednost. Prvo treba broj $i$ povećati za offset (odnosno prvu potenciju broja 2 veću od N). I nakon što postavimo $X_i$ treba osvježiti njegove roditelje s novim vrijednostima.

Funkcija `get` (odnosno `sum`, `min`, ili `max`) je nešto kompliciranija. Tražimo sumu u intervalu `[from, to>`. Prvo pozivamo `sum( i=1, lo=0, hi=offset )`. Varijable `i`, `lo` i `hi` znače da se trenutno nalazimo u čvoru i koji pamti sumu elemenata iz intervala `[lo, hi>`.

Prvi if:          

```
  if( from >= hi || to <= lo ) return 0; 
```

gleda jesu li intervali `[from,to>`  i  `[lo,hi>` disjunktni, ako jesu onda ne moramo dalje
tražit i vraćamo nulu.

Drugi if:   

```
   if( lo >= from && hi <= to ) return a[i].sum;
```

gleda je li interval `[lo,hi>` potpuno unutar intervala `[from,to>` te ako je onda vratimo
sumu cijelog tog intervala.

Ako nijedan if nije zadovoljen, znači da se intervali djelomično preklapaju, pa dijelimo interval `[lo,hi>` na pola, i za svaki zovemo rekurziju.

Osim za traženje minimuma, maksimuma i sume niza. Ovo stablo može se koristiti za odgovorit na još puno raznih upita. Npr. koji je najdesniji element u intervalu koji nije 0.

!!!
2006. Luka Kalinovčić
!!!