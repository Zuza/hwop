= Konstantna struktura =

== Problem ==

Potrebno je dizajnirati strukturu koja pamti niz brojeva i koja sto brze moze odgovoriti na upit:

- koji je najmanji broj u intervalu [lo, hi]?

Npr, za niz brojeva:

<table><tr>
<th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th>
</tr><tr>
<td>-1</td><td>1</td><td>4</td><td>2</td><td>-5</td><td>1</td><td>2</td><td>3</td>
</tr></table>

Mozemo navesti sljedeće upite i odgovore:

- [0, 2] : **-1**
- [0, 7] : **-5**
- [2, 5] : **-5**
- [5, 7] : **1**
- [2, 2] : **4**

Primjetite da nikada ne tražimo promjenu vrijednosti na nekom polju već samo izvršavamo operacije čitanja. Brojevi su numerirani od 0 za potrebe kasnijih odjeljaka.

== Razmatranja ==

Važno svojstvo funkcije **min** koje ćemo koristiti jest sljedeće:

$$
min( min(A), min(B) ) = min(A \cup B)
$$

Koje možda izgleda malo nerazumljivo kada je napisano, ali je zapravo krajnje jednostavno. Uzmimo dva skupa elemenata $A$ i $B$ . Neka je $m_a$ najmanji element u $A$ , a $m_b$ najmanji element u $B$ . Manji od brojeva $m_a$ i $m_b$ je sigurno najmanji element u $A \cup B$ .

U našem problemu će se to odnositi na intervale brojeva. Kako bi pronašli najmanji broj u intervalu od npr. 6 do 8, promatrati ćemo intervale [6, 7] i [7, 8]. Bez obzira što se ova dva intervala preklapaju, ako uzmemo manji broj od rješenja u ta dva intervala sigurni smo da imamo najmanji broj u cijelom intervalu.

== Predračunanje (//engl. preprocessing//) ==

U fazi inicijalizacije strukture cilj nam je unaprijed izračunati najmanje vrijednosti elemenata u nekim intervalima da bi kasnije mogli što brže doći do najmanje vrijednosti za bilo koji interval. Koristiti ćemo intervale čija je veličina potencija broja dva.

```
int mins[kLogMaxN][kMaxN];
```

U nizu `mins[ a ][ b ]` piše najmanji broj iz intervala $\left[b, b + 2^a\right>$ . Kada je $a = 0$ tj. u prvom retku ovog polja, nalaze se originalni članovi niza jer je tada $2^a = 1$ i desna granica intervala je isključiva. Ex: 

$$
mins[0][3] = min(niz\left[3, 3 + 2^0\right>) = min(niz[3]) = niz(3)
$$

Prema tome, za početak sve brojeve iz niza možemo učitati u prvi redak matrice `mins`.

```
void load() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &mins[0][i]);
  }
}
```

Da bi izračunali vrijednost u polju `mins` na nekom višem retku, odnosno najmanji broj u intervalu neke veće potencije broja dva, možemo se poslužiti sljedećom relacijom:

```
mins[a + 1][b] = min(mins[a][b], mins[a][b + 2^a]);
```

Odnosno, najmanji broj u intervalu veličine $2 \cdot 2^a$ koji počinje na mjestu $b$ možemo dobiti tako da promatramo intervale veličine $2^a$ koji počinju na mjestima $b$ i $b + 2^a$ . Ta dva intervala se zajedno spoje u veliki interval čije rješenje tražimo i ako uzmemo manji od najmanjih brojeva u njima, dobili smo najmanji broj u velikom intervalu. Primjer:

<table><tr>
<th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th>
</tr><tr>
<td>-1</td><td>1</td><td>4</td><td>2</td><td>-5</td><td>1</td><td>2</td><td>3</td>
</tr></table>

Najmanji broj u intervalu $\left[1, 3\right> = mins[1][1] = 1$ dok je najmanji broj u intervalu $\left[3, 5\right> = mins[1][3] = -5$ . Najmanji  broj u velikom intervalu 

$$
\left[1, 5\right> = min(mins[1][1], mins[1][3]) = mins[2][1] = -5
$$

Stoga preprocessing možemo napraviti dinamički:

```
void init() {
  for (int pot = 0; (1 << pot) <= n; ++pot) {
    for (int i = 0; i < n; ++i) {
      mins[pot + 1][i] = min(
        mins[pot][i],
        i + (1<<pot) < maxn ? mins[pot][i + (1<<pot)] : INF
      );
    }
  }
}
```

Operator `<<` je lijevi posmak broja u binarnom zapisu pa je operacija `1 << x` efektivno $2 ^ x$ . `INF` predstavlja pozitivnu beskonačnost.

== Upit ==

I naposljetku, upit za najmanji broj u bilo kojem intervalu neće biti teško implementirati jednom kada je predračunanje napravljeno. Neka je traženi interval $\left[a, b\right>$ veličine $s = b - a$ .

Potrebno je pronaći najveću potenciju broja dva manju ili jednaku od $s$ . Neka je to $2^i$ .

Primjetite da intervali $\left[a, a + 2^i\right>$ i $\left[b - 2^i, b\right>$ sigurno uključuju  cijeli interval $\left[a, b\right>$ . U to se možemo uvjeriti uspoređujući njihovu ukupnu duljinu sa duljinom originalnog intervala:

$$
2 \cdot 2^i \geq s
$$

Jer bi u suprotnom tražena potencija broja dva bila barem za jedan veća!

Uz pronađeni $2^i$ rješenje za najmanji broj u intervalu $\left[a, b\right>$ je `min(mins[i][a], mins[i][b - (1<<i)])`.

Ostaje pitanje kako pronaći najveću potenciju broja 2 manju ili jednaku nekom broju $s$ . Budući da je najveći $s$ za koji nas ovo zanima upravo broj članova u nizu, i za ovu vrijednost možemo napraviti predračunanje u istoj složenosti!

```
void init2() {
  najveca_pot[1] = 0; // 2^0 <= 1, dok 2^1 nije
  for (int i = 2; i < maxn; ++i)
    najveca_pot[i] = najveca_pot[i/2] + 1;  
}
```

== Zaključak ==

Postoji struktura podataka koja uz $O(n \log n)$ vremena predračunanja može odgovoriti na pitanje najmanjeg broja u intervalu u konstantnom vremenu.

Funkcija upita izgleda ovako:

```
int query(int a, int b) {
  int naj_pot = najveca_pot[b - a];
  return min(mins[naj_pot][a], mins[naj_pot][b - (1 << naj_pot)]);
}
```

!!!
2013 Anton Grbin
hvala: Marija, Neven, Tonko
!!!
