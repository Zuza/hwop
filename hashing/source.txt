= Hashing

== Kratki uvod i malo teorije

=== Što je hashing?

Prilikom rješavanja zadataka često koristimo ispitivanje jednakosti nekakvih objekata. Ako se radi o intovima naš je problem vrlo jednostavan. Što ako imamo hrpu nizova intova i zanima nas koji od njih su međusobno jednaki? Možemo ih uspoređivati element po element, no to se ne čini previše efikasno. Pogledajmo o čemu se radi na malo apstraktnijoj razini.


Imamo neki veliki skup $A$ i njegov podskup $B$ čije elemente želimo brzo uspoređivati. Označimo veličinu jednog elementa s $n$ i pretpostavimo da je složenost usporedbe koju radimo na elementima $O(n)$ . Za nešto veće $n$ ta složenost počinje utjecati na ukupnu složenost algoritma u kojem koristimo predviđenu usporedbu. Kako bismo tome doskočili uvodimo treći skup $C$ znatno manji od $A$ te posebnu funkciju $h : A \to C$ . Za funkciju $h$ kažemo da je ravnomjerna ako mapira otprilike jednak broj elemenata $A$ u elemente $C$. Pritom omjer $\frac{|A|}{|C|}$ nazivamo **load factor** i predstavlja očekivani broj elemenata $A$ koje $h$ mapira u neki element $C$ . Funkciju $h$ nazivamo **hash funkcija**, skup $A$ skupom svih mogućih ključeva, a skup $C$ skupom hash vrijednosti.

**Hashing** možemo definirati kao mapiranje nekih većih objekata u manje kako bismo ih lakše uspoređivali. Pritom postoji problem koji se naziva kolizija i posljedica je činjenice da ovim postupkom gubimo informacije i da se dvije vrijednosti mogu mapirati u istu **hash** vrijednost.

=== Jedan jednostavan primjer ===

Recimo da želimo implementirati trodimenzionalni niz intova čija je svaka dimenzija veličine milijun. Takav niz ne možemo realno ugurati u memoriju pa je potrebno iskoristiti neku drugu foru. Jedan od očitih pristupa bilo bi korištenje STL map strukture, ali ovdje nam je cilj pokazati što možemo izvesti korištenjem hash funkcija. Skup $A$ u ovom primjeru sadrži sve moguće trojke intova do milijun, dakle ima veličinu $10^{18}$ . Te ćemo trojke prvo morati smanjiti na neku prihvatljivu veličinu. Funkcija koju ćemo za trojku $(x, y, z)$ koristiti je sljedeća:

$h(x,y,z) = (x \cdot a^2 + y \cdot a + z) \mod p$

Za $p$ ćemo u našem slučaju uzeti broj $1000003$ , a za $a$ neki nasumični broj iz intervala $[0, p]$ . Nula i jedan se ovdje možda i ne čine kao najbolji izbor. Vrijednosti koje ćemo dobiti takvim mapiranjem trojki biti će puno manje od početnih pa ćemo za naš fiktivni niz `N[x][y][z]` zapravo koristiti nešto manji niz `N[h(x,y,z)]`.

Kako će tu i tamo sigurno doći do preklapanja odnosno **kolizije**, morat ćemo doskočiti i tom problemu.

=== Chaining metdoa rješavanja kolizije ===

Ova metoda rješavanja preklapanja vrlo je jednostavna i vjerojatno prva pada na pamet kao nadogradnja naše dosadašnje ideje. Što ako `N[h(x, y, z)]` nije samo niz intova nego lista četvorki `(x, y, z, v)` ? Prva tri elementa `(x, y, z)` predstavljaju trojku a, $v$ vrijednost koja je toj trojki pridružena u našem nizu, odnosno `N[x][y][z]`.  Ako želimo elementu na poziciji `(x, y, z)` dodijeliti neku vrijednost $v$ prvo ćemo ga potražiti u listi koja mu je pridružena već opisanom funkcijom.  Ako ga ne nađemo na kraj liste dodat ćemo četvorku `(x, y, z, v)`. Ako ga pak pronađemo jednostavno ćemo modificirati vrijednost $v$ u pripadajućoj četvorki.

Upravo smo vrlo jednostavno implementirali jako velik niz. No jedna stvar još nije jasna. Kako znamo da će naša funkcija ravnomjerno raspoređivati trojke?

=== Mala analiza hash funkcije ===

Funkcija koju smo definirali polinom je u $a$. Pogledajmo što dobijemo izjednačavanjem funkcije za dvije trojke $(x0, y0, z0)$ i $(x1, y1, z1)$ :

$h(x_0, y_0, z_0) = h(x_1, y_1, z_1)$

$(x_0 - x_1) \cdot a^2 + (y_0 - y_1) \cdot a + (z_0 - z_1) \equiv 0 \mod p$

Jednakost dakle dobivamo u slučaju kada je $a$ nultočka nekog trećeg polinoma modulo $p$. Polinom je maksimalno drugog stupnja pa tako ima maksimalno dvije različite nultočke (ovo usput nije odmah očito i vrijedi samo za prost $p$ ).  Vjerojatnost da je nasumični $a$ nultočka ovog polinoma tako je $2/p$ , oko $2 \cdot 10^{-6}$ za naš $p$ , što smatramo jako malim brojem i možemo očekivati da će funkcija biti prilično ravnomjerna.

Sada ako netko ne poznaje naš izbor $a$ i $p$ vrlo mu je teško namjestiti primjer u kojem se puno trojki mapira u istu vrijednost. Osim ovakve analize moguće je funkciju implementirati i isprobati u praksi. Tu treba imati na umu i "pravilne" inpute koji iz perspektive hash funkcije ne bi smjeli biti drukčiji od nasumičnih.

Dobro je primijetiti kako se ovaj primjer jednostavno poopći i na razne druge tipove indeksa i time dobivamo strukturu hash tablice, vrlo korisnu za brzo mapiranje.

Podatkovna struktura hash tablica podržava sljedeće operacije:

$ubaci(X) : S = S \cup X$

$izbaci(X) : S = S / X$

$pronadi(k) : X \in S$ takav da $X.key = k$ ili `NULL`

Podatkovna struktura hash tablica neće biti detaljno opisana u ovom članku.

== Pročitaj dalje

- [[hashing stringova]]

!!!
2014. Gustav Matula, Matija Šantl
!!!
