= Uvod u dinamičko programiranje

Algoritmi dinamičkog programiranja vrlo su raznoliki, no jedan detalj provlači se uvijek.. Pod pretpostavkom da smo već rješili sve probleme "manje" od trenutnog, znamo li korištenjem tog znanja rješiti veliki problem?

== Tipičan/školski/prvi primjer

Fibonaccijev niz je niz brojeva u kojem svaki sljedeći broj ima vrijednost sume dva prethodna:

$1, 1, 2, 3, 5, 8, 13, 21, 34...$

Odnosno, matematički zadan:

$$
F_1= 1 \\
F_2 = 1 \\
F_n = F_{n-1} + F_{n-2}
$$

Ovo je tipičan primjer dinamičkog programiranja. Mi možda neznamo rješiti odmah $F_{10}$ , no ako pretpostavimo da znamo rješenje za sve $F_1, F_2, \dots, F_9$ , onda je rješenje za $F_{10}$ na dohvat ruke, jer $F_{10} = F_8 + F_9$ .

Ok .. i kako nam ovo koristi? Sjetimo se da imamo trivijalne slučajeve: za prva dva člana niza rješenje je $1$ . Iako su ovo trivijalni slučajevi, pomoći će nam u rješavanju složenijeg problema : $F_3$ , a kada uspijemo rješiti treći član, moći ćemo rješiti četvrti...

=== Iterativan pristup

```name=prvih_30_fibonacci
int dp[31];
dp[0] = 1;  // trivijalni slucajevi
dp[1] = 1;  // prva dva clana niza su 1.

for (int i = 2; i < 31; ++i) {
  // pretpostavimo da smo rjesili sve clanove niza manje od i i da smo elemente smjestili
  // u niz dp[]. s tom pretpostavkom lako je rjesiti i-ti element!
  dp[i] = dp[i-2] + dp[i-1];
}
```

Ovaj kratki dio koda napuniti će niz `dp` s vrijednostima prvih 30 fibonaccijevih brojeva u 30 koraka.

=== Rekurzivan pristup

Kada bi rekurzivnu definiciju htjeli direktno prevesti u programski jezik, kod bi izgledao ovako nekako:

```
int f(int x) {
  if (x <= 2) return 1;
  return f(x - 1) + f(x - 2);
}
```

Postavlja se pitanje, koliko će se puta pozvati ova rekurzivna funkcija za neku
vrijednost $x$ ? Odgovor je nažalost puno više od $x$ . Pogledajmo zašto:

```
f(5) = f(4) + f(3) = 5
  f(4) = f(3) + f(2) = 2 + 1 = 3
    f(3) = f(2) + f(1) = 1 + 1 = 2
      f(2) = 1
      f(1) = 1
    f(2) = 1
  f(3) = f(2) + f(1) = 1 + 1 = 2
    f(2) = 1
    f(1) = 1
```

Vidljivo je kako smo 3 puta računali vrijednost za `f(2)`. Što ako jednom izračunatu vrijednost za neki `x` spremimo u memoriju i onda sljedeći put ne pozivamo ponovno rekurziju?



```
int dp[31]; // na pocetku je sve popunjeno nulama i znamo da niti jedan rezultat nece biti nula.

int f(int x) {
  if (dp[x] != 0) return dp[x]; // ako u nizu na mjestu x nije 0 to znaci da smo tu vec bili i izracunali vrijednost!
  if (x <= 2) return dp[x] = 1; // trivijalan slucaj, ne zaboravimo zapisati rjesenje u niz!
  return dp[x] = f(x - 1) + f(x - 2); // koristimo se cinjenicom da operator = vraca desnu vrijednosti (x = 2) == 2 :)
}

f(30);
```

Analizom ove funkcije vidljivo je kako ćemo za svaki `x` imati maksimalno jedan poziv funkcije. To vrijedi budući da će svaki poziv funkcije `f(x)` zapisati svoju vrijednost u `dp[x]`, i sljedeći put je neće preračunavati.

Broj koraka takvog programa je onda ponovno 30, kao i u iterativnom slučaju.

== Elementi svakog rješenja dinamičkim programiranjem

1. Stanje. U našem slučaju stanje je neki element niza.
2. Početni slučajevi. Prva dva elementa niza su 1.
3. Relacija. Trenutno stanje je zbroj prethodna dva stanja.

!!!
2014. Anton Grbin
!!!

