= Cjelobrojni zapis broja proizvoljne duljine

Nekada se u zadacima traži pamćenje cijelog broja koji je veći od svih tipova podataka koji su nam na raspolaganju. Tada moramo implementirati svoj tip podatka koji će predstavljati cijeli broj proizvoljne duljine.  

== Prvo rješenje

Rješenje koje nam prvo pada napamet je koristiti tip podatka znakovnih nizova te koristiti funkcije za rukovanje znakovnim nizovima kako bi prikazali cijeli broj. U ovakvoj implementaciji, ako se znakovni niz pamti na način da ga odmah možemo ispisati bez okretanja operacija zbrajanja već ima dovoljno linija koda da se može pogriješiti.

Malo bolje rješenje je pamtiti uvijek okrenuti znakovni niz tako da je znamenka jedinica uvijek prvi znak u znakovnom nizu. Pri ispisivanju broja moramo niz okrenuti i ispisati. Na sličnoj ideji se temelji i //pravo// rješenje problema koje je ovdje opisano.

== Matematička pozadina za rješenje s polinomima

Dekadski zapis broja $A$ je ništa drugo nego zapis broja u obliku:

$$
A = a_0 + 10 a_1 + 100 a_2 + \dots
$$

Gdje je $a_0$ znamenka jedinica i vrijedi da je $0 \le a_i \lt 10$ . Ovakav zapis podsjeća na zapis polinoma.

$$
f(x) = a_0 + a_1 x + a_2 x^2 + \dots
$$

U tom slučaju naš broj $A$ jednak je $f(10)$ . U ovakvom zapisu kažemo da je baza $10$ . Budući da polinome znamo zbrajati, oduzimati i množiti, to znanje možemo iskoristiti za operacije na brojevima proizvoljne duljine. Kako bi zapamtili polinom, čuvati ćemo samo njegove koeficijente u nizu koji se može proširivati - `vector`.

Pogledajmo na trenutak što će se dogoditi ako jedan od koeficijenata poprimi vrijednost veću od baze, npr:

$$
f(x) = 5 + 2 x + 15 x^2 + 3 x^3
$$

Evaluiranjem ovog polinoma u točci $x = 10$ dobivamo $f(10) = 4525$ . Budući da znamo da naš polinom promatramo uvijek u istoj točci, možemo to iskoristiti da transformiramo polinom u onaj sa svim jednoznamenkastim koeficijentima, a koji se u točci $x = 10$ evaluira u isti broj $4525$ .

$$
\begin{eqnarray}
f(x = 10) =& 5 + 2 x& + (10 + 5) x^2& + 3 x^3& \\
          =& 5 + 2 x& + 5 x^2& + 10 x^2 + 3 x^3& \\
          =& 5 + 2 x& + 5 x^2& + 4 x^3&
\end{eqnarray}
$$

Završni polinom je po znamenkama jednak broju $4525$ .


=== Transformacija koeficijenata u oblik gdje su koeficijenti manji od baze

Transformacija koju smo napravili svodi se na sljedeće korake ($B$ je oznaka za bazu brojevnog sustava, recimo 10):

- postavi ostatak na $0$ , trenutni koeficijent je najneznačajniji - $a_0$ 
- dok god nismo obišli sve koeficijente ili ostatak nije $0$
  - trenutnom koeficijentu $a_i$ dodaj ostatak
  - ostatak postavi na $\frac{a_i}{B}$
  - trenutni koeficijent postavi na $a_i \mod B$ .

U programskom jeziku, to bi mogli implementirati na sljedeći način:


```lang=cpp
  vector<int> a;
  const int B = 10;

  void norm() {
    while (!a.back()) a.pop_back();
    for (int residue = 0, it = 0; it < (int) a.size(); ++it) {
      a[it] += residue;
      residue = a[it] / B, a[it] = a[it] % B;
      if (residue && it + 1 == a.size())
        a.push_back(0);
    }
  }
```

Prva linija u funkciji `norm` će izbaciti sve nepotrebne nule s kraja polinoma, budući da one predstavljaju vodeće nule u zapisu broja. Ostatak funkcije je lako čitljiv uz korišteni trik koji poveća veličinu niza ako dođemo do zadnje znamenke i ostatak postoji.

Primjećujemo kako je za inicijaliziranje polinoma dovoljno na slobodni koeficijent $a_0$ zapisati neki cijeli broj i pozvati funkciju `norm()`, ovisno u bazi u nizu `a` dobiti ćemo obrnuti rastav zapisanog broja na znamenke u definiranoj bazi.

== Zbrajanje i množenje

Uz definiranu transformaciju normalizacije, zbrajanje polinoma je trivijalno - polinome zbrojimo po koeficijentima i rezultantni polinom normaliziramo.

Množenje polinoma izvodimo u kvadratnom prolazu. Svaki par elemenata $a_i$ i $b_j$ iz dva polinoma će povećati potenciju na mjestu $i + j$ za $a_i \cdot b_j$ :

```lang=cpp
  for (size_t it1 = 0; it1 < a.size(); ++it1)
    for (size_t it2 = 0; it2 < b.size(); ++it2)
      sol[it1 + it2] += a[it1] * b[it2];
```

Ovaj isječak se ne brine o greškama izlaska van niza.

== Povećavanje baze

Primjetimo da trenutno sve operacije zbrajanja i množenja radimo s malim brojevima (brojevima koji su manji od baze). Postavlja se pitanje zašto ne bi povećali bazu na neki višekratnik broja $10$ i rukovali s više znamenaka od jednom? Cijela logika i dalje stoji netaknuta, jedina promjena je što će baza postati puno veći broj. Najveća baza koja stane u `unsigned long long` tip podatka sa sigurnim množenjem je $10^9$ , no tada množenje može napraviti overflow u zbroju (zašto?). Tome možemo doskočiti tako da odmah u množenju radimo i normalizaciju znamenaka ili da smanjimo bazu.

```lang=cpp
  void out() const {
    printf("%lld", a.back());
    for (int it = a.size() - 2; it >= 0; --it)
      printf("%07lld", a[it]);
    printf("\n");
  }
```

Naime, vodeći skup znamenki smo ispiali u formatu bez vodećih nula dok smo sve ostale znamenke u sredini našeg broja ispisivali s vodećim nulama tako da je širina ispisa $9$ .

== Implementacija u strukturi

Slijedi implementacija `bignum` strukture:

```lang=cpp
typedef unsigned long long llint;

struct bignum {
  bignum(llint k) : a(1, k) {norm();}

  void out() const {
    printf("%lld", a.back());
    for (int it = a.size() - 2; it >= 0; --it)
      printf("%07lld", a[it]);
    printf("\n");
  }

  bignum& norm() {
    while (!a.back()) a.pop_back();
    llint residue = 0;
    for (size_t it = 0; it < a.size(); ++it) {
      a[it] += residue;
      residue = a[it] / B, a[it] = a[it] % B;
      if (residue && it + 1 == a.size())
        a.push_back(0);
    }
    return *this;
  }

  bignum operator+ (const bignum &rhs) const {
    int size = max(a.size(), rhs.a.size());
    bignum sol(0, size);
    for (size_t it = 0; it < size; ++it)
      sol.a[it] = (*this)[it] + rhs[it];
    return sol.norm();
  }

  bignum operator* (const bignum &rhs) const {
    bignum sol(0, a.size() + rhs.a.size());
    for (size_t it1 = 0; it1 < a.size(); ++it1)
      for (size_t it2 = 0; it2 < rhs.a.size(); ++it2)
        sol.a[it1 + it2] += (*this)[it1] * rhs[it2];
    return sol.norm();
  }

 private:
  static const llint B;
  vector<llint> a;

  bignum(llint k, size_t size) : a(size, k) {}

  llint operator[] (const int index) const {
    return index < a.size() ? a[index] : 0;
  }
};

const llint bignum::B = 10000000;
```

Ova implementacija množenja može napraviti overflow!

!!!
2014. Anton Grbin
!!!
