= Cirkulacije

under construction


Circulations with demands problem sličan je network flow, a uz pomoć cirkulacija se mogu lakše modelirati rješenja nekih zadataka.
Problem cirkulacije u mreži definiran je sa četiri funkcije:
$$
lo(u, v), hi(u, v), cost(u, v), demand(v)
$$
gdje su u i v vrhovi nekog grafa G = {V, E}

Funkcija \[f(u, v)\] je cirkulacija ako vrijedi:
$$
lo(u, v) <= f(u, v) <= hi(u, v), \forall u, v \in V (1)\\
\sum\limits_{u \in V} f(u, v) - \sum\limits_{w \in V} f(v, w) = demand(v), \forall v \in V (2)
$$
Neformalno, protok kroz svaki brid mora biti između lo i hi, dok u svakom čvoru zbroj protoka na ulaznim bridovima umanjen za zbroj protoka na izlaznim bridovima mora bit jednak potražnji. Cijenu cirkulacije definiramo kao:
$$
\sum\limits_{u, v \in V} cost(u, v) * f(u, v)
$$

Ako zbrojimo sve nejednakosti (2) za svaki vrh v:
$$
\sum\limits_{u, v \in V} f(u, v) - \sum\limits_{v, w \in V} f(v, w) = \sum\limits_{v \in V} demand(v) \\
0 = \sum\limits_{v \in V} demand(v)
$$
dobijemo da zbroj svih demandova mora biti jednak 0 jer smo f(u, v) jednom dodali i jednom oduzeli za svaki u i v. U protivnom ne postoji funkcija f(u, v) koja je cirkulacija.

Međutim, kako pronaći neku funkciju f(u, v) koja je cirkulacija?

Pretpostavimo za početak da je lo(u, v) = 0, za svaki u i v. Tada je problem moguće svesti na maximum multiple source/sink network flow problem.

Vrhovi gdje je demand(v) < 0 postaju izvori koji nude |demand(v)| jedinica protoka, vrhovi gdje je demand(v) > 0 postaju ponori koji traže |demand(v)| jedinica protoka, dok vrhovi gdje je demand(v) = 0 ostaju obični vrhovi. Kako je zbroj svih demandova jednak 0, to je ukupna ponuda jednaka ukupnoj potražnji.

Kapacitete bridova postavimo na hi(u, v), te opogonimo klasični max flow algoritam. Ukoliko algoritam uspije progurati sve jedinice protoka od svih izvora do svih ponora, tada je prema definiciji pronađeni flow rješenje izvornog problema:
(1) vrijedi jer smo postavili kapacitet bridova na hi(u, v), a lo(u, v) = 0 
(2) vrijedi po definiciji multiple source/sink network flow problema.

Ukoliko pritim želimo minimizirati cijenu cirkulacije, dovoljno je samo opogoniti min cost max flow algoritam.

Vratimo sada ograničenje lo(u, v) i rastavimo funkciju protoka f(u, v) na dva dijela, jedan koji zadovoljava ograničenje lo(u, v) <= f(u, v) i drugi dio kojim ćemo zadovoljiti ograničenje (2).
$$
f(u, v) = lo(u, v) + f'(u, v).
$$

Jednostavnim rastavljanjem f(u, v) na dva dijela i prebacivanjem na drugu stranu (1) i (2) postaju:
$$
0 <= f'(u, v) <= hi(u, v) - lo(u, v), \forall u, v \in V (1) \\
\sum\limits_{u \in V} f'(u, v) - \sum\limits_{w \in V} f'(v, w) = demand(v) - \sum\limits_{u \in V} lo(u, v) + \sum\limits_{w \in V} lo(v, w), \forall v \in V (2)
$$
iz čega slijedi da je f'(u, v) također cirkulacija sa ograničenjima:
$$
lo'(u, v) = 0 \\
hi'(u, v) = hi(u, v) - lo(u, v) \\
demand'(v) = demand(v) - \sum\limits_{u \in V} lo(u, v) + \sum\limits_{w \in V} lo(v, w)
$$
a rješenje tog problema smo malo prije opisali (multiple source/sink network flow).

Pređimo sad na zanimljiviji dio ovog članka gdje ćemo pokazati kako možemo modelirati rješenja nekih zadataka uz pomoć cirkulacija.

Kao prvi primjer uzet ćemo zadatak Skiers (http://www.oi.edu.pl/old/php/show.php?ac=e100000&module=show&file=zadania/oi9/nar).

Zadan je usmjereni aciklični graf sa dva specijalna vrha, A i B. Graf ima svojstvo da skijaš koji kreće iz vrha A može doći do svakog vrha u grafu, te iz svakog vrha u grafu može doći do vrha B.
Pitanje je koliko je skijaša potrebno unajmiti da bi prošli svaki brid u grafu barem jednom, ako se svaki skijaš može spustiti samo jednom od A do B.

Ovaj zadatak može se efikasno rješiti ako prepoznamo da je riječ o Dilworthovu teoremu, ali za potrebe ovog članka modelirat ćemo ga uz pomoć cirkulacija.

Dodajmo zamišljeni vrh C koji predstavlja kućicu u kojoj obitavaju skijaši. Dodajmo brid (C, A) [lo(C, A) = 0, hi(C, A) = ∞, cost(C, A) = 1]. To znači da možemo unajmiti proizvoljan broj skijaša, ali svakog moramo platiti. Dodajmo i brid (B, C) [lo(B, C) = 0, hi(B, C) = ∞, cost(B, C) = 0], da se naši skijaši mogu bezbrižno vratiti kući nakon spusta od A do B.

Preostalim bridovima u grafu dodijelimo [lo(u, v) = 1, hi(u, v) = ∞, cost(u, v) = 0] budući da svakim bridom mora proći barem jedan skijaš, ali može i više. Prolazak skijaša nas ništa ne košta jer smo ga već ranije unajmili (na bridu (C, A)).

demand(u) = 0 za svaki vrh u grafu, što znači da sav će sav protok kružiti u mreži, ništa se ne stvara niti ponire u vrhovima. U tom slučaju cirkulaciju možemo rastaviti na cikluse.

Što smo sada dobili? Put svakog skijaša od trenutka kad ga unajmimo u vrhu C, preko vrha A i spusta do vrha B, te povratka nazad u vrh C čini ciklus.
Štoviše jedini način da zatvorimo ciklus u ovom grafu je kroz vrh C.
To znači da svaka cirkulacija kad ju rastavimo na cikluse opisuje neku kombinaciju unajmljivanja skijaša i njihovih spustova kroz graf.

Uvjet lo(u, v) = 1 će osigurati da ćemo svakim bridom proći barem jednom, a ako opogonimo min-cost max-flow algoritam, pronaći ćemo najjeftiniju cirkulaciju. Kako je brid (C, A) jedini brid u grafu koji ima težinu, to je cijena cirkulacije jednaka broju unajmljenih skijaša i time je zadatak riješen.


under construction


!!!
2013. Luka Kalinovčić
!!!