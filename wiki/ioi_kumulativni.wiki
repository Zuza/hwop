= Savjeti koji se ponavljaju

=== scanf i asterix

```
scanf("%d%d%*d", &a, &b);
```

[[http://stackoverflow.com/questions/2155518/what-is-scanfs-and-scanfd-format-identifiers/2155555#2155555|netko citira standard]]

Ukratko, konverzija koja ima znak * znaci da se parametar parsa ali discarda.

Isto tako, razmak u scanf formatu je gotovo uvijek nepotreban. Onda kada je stavljen predstavlja bilo koji niz praznina. Posebno biti oprezan kada se mijesa scanf("%c", ..), getline i cin. To bolje ne raditi :)

=== makro

Ovo bi moglo ici u **knjiznicu**.

```lang=c
#define sort(V) sort(V.begin(), V.end())

#define reverse(V) reverse(V.begin(), V.end())

#define unique(V) do {\
    sort(V); \
    V.resize(unique(V.begin(), V.end()) - V.begin());\
  } while (0)

// #define debug
#ifdef debug
#define print(x) cout << #x << " = " << x << "\n"
#else
#define print(x)
#endif
```

makro-e debagiramo pozivom samo preprocesora `g++ -E a.cpp`. ova naredba ispisuje potpuno preprocesani kod.

=== c++ konstruktori

pair<int, int> ima defaultni konstruktor koji prima dva integera i radi ocekivanu stvar. stoga:

```
pair<int, int> par(2, 3); // da
pair<int, int> par = make_pair(2, 3); // ne, sporije je. dvaput instanciramo par.
```

nasljedjivanje konstruktora u strukturi

```
struct a {
  int x, y;
  a(int x = 0, int y = 0) : x(x), y(y) {} // da
  a(int _x = 0, int _y = 0) {x = _x; y = _y;} // da, ali k znakova duze i dok pregledavam
  // kod malo mi duze treba da provjerim jesu li svi pripadajuci elementi OK pridruzeni
};
```

Sto se tice obicnih podataka kao sto je int, sljedece dvije linije su u C++ ekvivalentne.

```
int x(5);
int x = 5;
```

Recimo da nam se druga vise svidja.

=== o preciznosti tipa podataka double

Svaki integer se moze bez greske prikazati kao double. Svaki long long NE.

To znaci da:

```
long long x;
assert((long long) (double) x == x);
```

ne mora biti istinito uvijek. No, ako je x integer, onda da. Isto tako, koliko se koraka izvrsava ova petlja:

```
for (double x = 0; x != 1; x += 0.1);
```

?

=== gdje su struct i class, dvije sestre ...

`struct` i `class` su u C++ skoro sinonimi. nama glavna bitna razlika je sto u `struct` svi clanovi su `public by default`, dok su u klasi svi prvatni.

dakle kod

```
class a {
  public:
   ...
   ...
};
```

je ekvivalentan

```
struct a {
   ...
};
```

Druga razlika ima veze s nasljedjivanjem i ona je `out of scope`. Smatram da u natjecateljskim implementacijama gotovo nikad nece biti potrebno koristiti nesto privatno.

http://blog.stevedoria.net/20050913/differences-between-cpp-classes-and-structs

=== naucimo reference.

```lang=c
// primi vlasnistvo neke varijable iz nekog drugo scope-a. u ovom scopu (ovoj
// funkciji) ta varijabla ce se zvati v. funkcija poveca varijablu s kojom je
// pozovemo.
// ovo je najbrzi prijenos neke varijable u funkciju jer se ne kopira ama bas
// nista. zbog toga smijemo onda prenositi cijele map-e, set-ove i vektore bez
// straha da ce raditi sporo. no potrebno je paziti da su efekti koje napravimo
// nad paremetrom v vidljivi pozivatelju.
// parametar s kojim zovemo funkciju f MORA biti cvrsta varijabla koju vidimo
// iz pozivajuceg scope-a.
int f(int &v) {
  ++v;
}

// primi vlasnistvo varijable v ali zbog const-a kompajler te stiti da neces
// mijenjati taj v. dakle smijemo ga samo citati.
// ovdje mozemo koristiti cinjenicu da nema nikakvog kopiranja i nemat straha da
// cemo nastetiti pozivatelju (promijeniti mu nesto cega nije svjestan).
int g(const int &v) {
  return v;
}

int broj_pet() {return 5;}

int main() {

  // x je lokalna varijabla u ovom scopeu
  int x = 4;

  // funkciji f dajemo pravo da dira nas x. ona ce ga povecati.
  f(x);

  // funkciji g dajemo pravo da CITA nas x (zbog const int &v), ona ce samo
  // vratiti (x + 1) u ovom slucaju.
  g(x);

  // sto ocekujemo od ovog poziva? ajmo probat rijecima:
  // funkciji f dajemo pravo da dira .. ? drugu funkcjiu ? njenu povratnu
  // vrijednost? recimo da mozemo dirati njenu povratnu vrijednost (to je u
  // ovom slucaju broj 5), koji je efekt od toga sto smo povecali za jedan
  // privremeni objekt? kompajler ce ovdje prepoznati nebulozu i dati gresku.
  f(broj_pet());

  // isto tako, "5" nije varijabla cije vlasnistvno mozemo predati nekoj
  // funkciji. compile error.
  f(5);

  return 0;
}
```

Poruka kompajlera:

```
ref.cpp: In function ‘int main()’:
ref.cpp:44:15: error: invalid initialization of non-const reference of type ‘int&’ from an rvalue of type ‘int’
ref.cpp:13:5: error: in passing argument 1 of ‘int f(int&)’
ref.cpp:48:6: error: invalid initialization of non-const reference of type ‘int&’ from an rvalue of type ‘int’
ref.cpp:13:5: error: in passing argument 1 of ‘int f(int&)’
```

=== jedini ternarni operator u C

Izraz

```
(condition ? when_true : when_false)
```

ima vrijednost `when_true` ako je `condition` ekvivalentno sa true (odnosno `condition::bool == true`, odnosno `condition` nije nula za brojeve), u suprotnom izraz ima vrijednost `when_false`.

Pomocu ovog operatora mozemo jedno-linijski zapisati neke poznate funkcije:

```
int veci(int a, int b) {return a > b ? a : b;}
int manji(int a, int b) {return a < b ? a : b;}
int absolutno(int x) {return x > 0 ? x : -x;}
int faktorijela(int n) {return n ? n * faktorijela(n - 1) : 1;}
int gcd(int a, int b) {return a % b ? gcd(b, a % b) : b;}
int popcount(int x) {return x ? (x & 1) + popcount(x >> 1) : 0;}
int popcount2(int x) {return x ? (x & 1) + popcount(x - (x&-x)) : 0;}
int log2(int x) {return x ? 1 + log2(x >> 1) : 0;}
```

(probajte provjerit jeli svaka funkcija radi ono sto sam htio da radi, pls)

=== komparator sa stanjem

Nekada je tocke potrebno sortirati po kutu u odnosu na neku ishodisnu tocku. U tom slucaju nam treba komparator koji ce imati pristup toj tocki uvijek. Osim globalne varijable preferiramo i rjesenje:

```lang=c
struct cmp_fi {
  pt origin;
  cmp_fi(pt origin) : origin(origin) {}
  
  bool operator() (const pt &a, const pt &b) {
    return ccw(origin, a, b) > 0;
  }
};
```

takva struktura se moze instancirana predati u `sort` ili instancirati cijeli `set` s njom:

```
sort(points, points + N, cmp_fi(p));
set<pt, cmp_fi> S(cmp_fi(p));
```

Ovo je posebno lijepo u implementaciji dijkstre.

=== const const const ...

**const** je modifier (ide lijevo od deklaracije varijable) koji oznacava da se ta varijabla kroz svoj zivotni vijek nece mijenjati. **const** uglavnom koristimo kako bi zastitili sebe od greske, npr:

```
const int maxn = 100000;
```

program ce raditi isto ako u ovom slucaju nema `const` modifiera, no moze nam se slucajno dogoditi da promijenimo `maxn` i tako izgubimo debug vrijeme. takav tipfeler zapravo i nije tesko napraviti (a tesko ga je uociti, ti su najopasniji):

```
// htio sam ispitati jednakost varijabli maxn i it, a napisao sam:
if (maxn = it) ...
```

Buduci da smo definirali `maxn` kao `const`, ovdje ce kompajler javiti gresku. 

```COUNTEREXAMPLE
error: assignment of read-only variable ‘maxn’
```

Standardno mjesto gdje koristimo `const` je unutar komparatora, jer tamo gotovo nikad ne zelimo mijenjati objekte koje kompariramo:

```
bool cmp(const objekt a, const objekt b) {
  return a.x < b.x;
}
```

Ocito je da nismo mijenjali objekte koje usporedjujemo i nema greske kompajlera.
No, sto ako zelimo usporediti objekte `a` i `b` prema nekoj izracunatoj vrijednosti?

```
bool cmp(const objekt a, const objekt b) {
  return a.eval() < b.eval();
}
```

Bez obzira sto `eval()` ne mijenja stanje objekta, ako je nismo deklarirali kako treba, dobiti cemo sljedecu gresku:

```COUNTEREXAMPLE
error: passing ‘const objekt’ as ‘this’ argument of ‘int objekt::eval()’ discards qualifiers
```

Kako napisati metodu `eval` da kompajler zna da ona nece mijenjati objekt nad kojim se je pozvala? Odgovor na to pitanje je rjecica `const` poslije parametara metode, a prije viticaste zagrade:

```
struct objekt {
  int x;
  int eval() const {return x*x;}
};
```

Sada sve radi ocekivano.

Potrebno je jos primjetiti da je komparator napisan bez znaka reference `&`, pa zapravo i necemo napraviti stetu ako promijenimo objekt iz parametra jer se je on ionako kopirao (klonirao) u nas komparator. Pravi komparator pisemo tako da 'posudimo' vlasnistvo nad objektima koje usporedjujemo (koristeci `&`), osiguramo se da necemo mijenjati to sto smo posudili (koristeci `const`) i onda radimo sto zelimo, a C++ se brine da ni slucajno ni namjerno nismo prekrsili dogovor o `const`-u.

=== referenca u memoizaciji

```lang=c
int dp[maxn][maxn];

int f(int a, int b) {
  if (a < 0 || b < 0 || a >= maxn || b >= maxn) return 0;

  // bind ret to a dp[a][b]. it can't be unbind.
  int &ret = dp[a][b];
  if (ret != -1) return ret;
  ret = 1;

  // do the math.
  for (int i = 0; i < a; ++i)
    for (int j = 0; j < b; ++j)
      ret += f(i, j);

  // return ret!
  return ret;
}
```

ovakvim dizajnom rekurzije s memoizacijom uopce ne koristimo novu lokalnu varijablu `ret` za spremanje rjesenja vec rukujemo direktno s vrijednosti u `dp[][]` polju.

ovaj kod se moze zamisliti kao da linije `int &ret = ..` nema, a da sve ispod gdje pise `ret` pise `dp[a][b]`.


!!!
2013, Anton Grbin
!!!