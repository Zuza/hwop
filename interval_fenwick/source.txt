= Interval fenwick =

**Obavezno pročitati prije:**

 - [[strukture_logaritamska|Logaritamska struktura ili Fenwickovo stablo]]
 - [[strukture_logaritamska_tutorial|Tutorial za Fenwickovo stablo]]

Kada je potrebno postići logaritamsku vremensku složenost za ubacivanje elemenata u niz i traženje rezultata sume nad nekim intervalom u nizu tada se može koristiti fenwickovo stablo. Ubacivanjem elementa u fenwickovo stablo smatramo pribrojavanje broja $x$ na neku poziciju $p$ .

Ponekad želimo nadodati broj $x$ svim elementima u nekom intervalu $[a, b]$ . Ako koristimo obično fenwickovo stablo tada je vremenska složenost ubacivanja nekog broja na cijeli interval $O(n \log n)$ . Postavlja se pitanje: može li se napraviti struktura podataka koja u logaritamskom vremenu ubacuje element $x$ u neki interval i koja u logaritamskom vremenu računa sumu u proizvoljnom intervalu.

==Definicija strukture koju pokušavamo izgraditi==

Struktura mora u $O(\log n)$ složenosti podržavati sljedeće operacije:

- Dodaj vrijednost $x$ svim poljima u intervalu $[a, b]$ !
- Kolika je suma u vrijednosti u intervalu $[a, b]$ ?

==Izvod==

Jedno od rješenja je tournament stablo s propagacijom tj. nadogradnja tournament stabla s lijenom evaluacijom. Problem ovog pristupa je težina implementacije, tj. duljina koda i otežano traženje grešaka. Drugi pristup je intervalno fenwickovo stablo. Zapravo se radi o dva obična fenwickova stabla koja pamte početke i krajeve intervala. Idemo prvo pogledati koja je generalna ideja, a kasnije ćemo na tu ideju primijeniti obično fenwickovo stablo. Zapisujemo broj $x$ na interval $[a, b]$ . Za početak pogledajmo upite oblika $[1, c]$ , gdje je s $1$ označena početna pozicija. $c$ može biti (prema tipu upita):

 # manje od $a$ i tada je odgovor upita $0$
 # može biti veći ili jednak $b$ tada je odgovor $(b - a + 1)\cdot x$
 # ako je $c$ između $a$ i $b$ tada je odgovor $(c - a + 1)\cdot x$ .

Sumu u intervalu $[a, b]$ možemo pronaći na sljedeći način: `upit([a,b]) = upit([1,b]) - upit([1, a-1])`. Kao što vidimo problem se svodi na upit oblika $[1, c]$ . Kako bismo mogli pamtiti intervale koje smo ubacili koristimo dva niza: $mul$ i $add$ . Niz $mul$ brinut će se za slučajeve drugog tipa, a niz $add$ za slučajeve trećeg tipa. Kada ubacujemo $x$ u interval $[a, b]$ :

 # U niz $mul$ upišemo: 
   - $mul[a] = x$
   - $mul[b] = -x$  
 # U niz $add$ upišemo: 
   - $add[a] = -x\cdot (a-1)$ 
   - $add[b] = x\cdot b$


Upite [1, c] računamo na sljedeći način: $\sum_{i=1}^{c}mul[i]\cdot c + \sum_{i=1}^{c}add[i]$ 

Provjerimo da li ovakvo izračunavanje upita zaista daje točne odgovore:

 # Ako je c manje od a, tada svi elementi do c su 0 pa ovaj slučaj nije zanimljiv
 # Ako je c veći ili jednak b tada je 
   - $\sum_{i=1}^{c} mul[i] \cdot c = 0$ jer $mul[a] = x$ i  $mul[b] = -x$ , tj. njihova suma je $0$ .
   - $\sum_{i=1}^{c} add[i] = add[a] + add[b] = -x\cdot (a-1) +  x\cdot b = x \cdot (b-a+1)$ , što je točan odgovor na upit drugog tipa.
 # Ako je c između a i b tada je 
   - $\sum_{i=1}^{c} mul[i]\cdot c + \sum_{i=1}^{c}add[i] = c\cdot x + (-x)\cdot (a-1) = x\cdot (c-a+1)$ što je točan odgovor za upite trećeg tipa.

Sad smo provjerili da li formula za upit dobro radi ako smo prije toga ubacili samo jedan interval. Pravimo se na tren da za svaki novi interval koji ubacujemo stvaramo dva nova niza $mul$ i $add$ . Označimo intervale koje smo ubacili s $k$ i neka ih ima $M$ . Neka je $upit_k$ upit za jedan interval. Tada je odgovor na upit kolika je suma u intervalu $[1, c]$ za sve intervale koje smo ubacili: $\sum_{k=1}^{M} upit_k$ .

$$
\begin{eqnarray}
\sum_{k=1}^{M} upit_k
  =&\sum_{k=1}^{M} \big( \sum_{i=1}^{c}mul_k[i]\cdot c + \sum_{i=1}^{c}add_k[i] \big)
  = \sum_{k=1}^{M} \sum_{i=1}^{c} (mul_k[i]\cdot c + add_k[i]) \\
  =&\sum_{i=1}^{c} \sum_{k=1}^{M} mul_k[i]\cdot c + \sum_{i=1}^{c}\sum_{k=1}^{M}add_k[i]
  = \sum_{i=1}^{c} mul[i]\cdot c + \sum_{i=1}^{c}add[i]
\end{eqnarray}
$$

Prema ovom izvodu vidimo da sve intervale možemo spremati u iste nizove $mul$ i $add$ . Pravila za ubacivanje su tada:

 # U niz $mul$ upišemo: 
   - $mul[a] = mul[a] + x$
   - $mul[b] = mul[b] - x$  
 # U niz $add$ upišemo: 
   - $add[a] = add[a] - x \cdot (a-1)$
   - $add[b] = add[b] + x \cdot b$

Formula za upit ostaje ista. Ako bolje pogledamo formulu, ona uvijek traži sume u nizovima $mul$ i $add$ . Potrebno je uočiti da taj problem možemo riješiti pomoću Fenwickove strukture u logaritamskoj vremenskoj složenosti. Dakle, potrebne su nam dvije Fenwickove strukture, jedna koja se brine za niz $mul$ i druga koja se brine za niz $add$ . Dakle dobili smo tražene vremenske složenosti.

Kada ne bi koristili Fenwickovo stablo, nego bi $mul$ i $add$ direktno implementirali pomoću nizova, tada bi vremenska složenost za upit bila $O(n)$ , a vremenska složenost za ubacivanje $O(1)$ , što je dobro ako je broj ubacivanja puno veći od broja upita.

Ukratko ponovimo što smo napravili: Potrebno je bilo smisliti strukturu koja u logaritamskom vremenu ubacuje intervale i daje odgovore na upite također u logaritamskom vremenu. Ideja je bila da na pametan način označavamo početak i kraj niza i to smo obavili s dva niza. Upit koji vršimo nad ta dva niza koristi sumu od prvog elementa do nekog traženog, gdje uočavamo da je upit moguće implementirati pomoću Fenwickovog stabla u logaritamskoj vremenskoj složenosti, zbog čega dobivamo i logaritamsku vremensku složenost za ubacivanje.

==Implementacija==

 
```lang=c,name="Pomocne strukture"
fenwick_tree mul; //Fenwickovo stablo za mul
fenwick_tree add; //Fenwickovo stablo za add
```


  
```lang=c,name="Operacija ubacivanja intervala"
void ubaci(int x, int a, int b) {
  mul.ubaci(x, a);
  mul.ubaci(-x, b);
  add.ubaci(-x * (a - 1), a);
  add.ubaci(x * b, b);
}
```



```lang=c,name="Operacija upita"
int upit(int x) {
  return mul.upit(x) * x + add.upit(x);
}

int upit(int a, int b) {	
  return upit(b) - upit(a - 1);
}
```

==Zadaci==

* [[http://www.spoj.com/problems/LITE/]]


==Izvor==

* [[http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html]]

!!!
2014. Dino Šantl
!!!
